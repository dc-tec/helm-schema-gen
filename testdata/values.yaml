# Default values for dummy.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: nginx
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

# Test various naming conventions for schema validation
conventionTests:
  camelCase: "correct format"
  NOT_CAMEL_CASE: "incorrect format - uppercase"
  with-hyphen: "incorrect format - hyphen"
  with_underscore: "incorrect format - underscore"

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""
  # Test various types of enabled flags for type detection
  enabled: true
  secondEnabled: "true" # string that should be treated as boolean

podAnnotations: {}
# Testing multiple types in annotations
extraPodAnnotations:
  key1: "value1"
  key2: "value2"

# Test null value - often detected incorrectly
additionalLabels: null

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

# Test deep nesting for depth detection
deeplyNested:
  level1:
    level2:
      level3:
        level4:
          level5:
            level6:
              property: "test"

service:
  type: ClusterIP
  port: 80
  # Test containerPort for detection as both string and integer
  containerPort: 8080
  # Test variant string values
  enabled: true
  otherService:
    enabled: "false"

ingress:
  enabled: false
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths: []
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local
  # Test secretName for null/string types
  secretName: null
  secondSecret: "my-tls-secret"

# Test array with mixed types
mixedArray:
  - "string value"
  - 123
  - true
  - 3.14

# Test empty arrays for item detection
emptyArray: []

resources:
  # Test CPU/memory fields that should support multiple types
  limits:
    cpu: "100m"
    memory: 128
  requests:
    cpu: 0.5
    memory: "256Mi"

# Test variable numeric formats
numeric:
  integerValue: 42
  floatValue: 3.14
  stringInteger: "100"
  memoryValue: "512Mi"

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Test tolerations array
tolerations:
  - key: "dedicated"
    operator: "Equal"
    value: "test"
    effect: "NoSchedule"

# Test for object/string type support
config: |
  key1: value1
  key2: value2

# Test date formats
dates:
  release: "2023-10-15"
  timestamp: "2023-10-15T14:30:00Z"
  email: "user@example.com"
  website: "https://example.com"

# Special formats for testing
specialFormats:
  jsonContent: '{"key": "value"}'
  yamlContent: |
    foo: bar
    nested:
      value: test
  rawConfig: |-
    This is raw text
    that spans multiple lines

nodeSelector: {}

affinity: {}
